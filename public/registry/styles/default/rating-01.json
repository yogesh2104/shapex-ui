{
  "name": "rating-01",
  "type": "registry:block",
  "description": "rating block 1",
  "registryDependencies": [],
  "files": [
    {
      "path": "blocks/rating-01/page.tsx",
      "content": "import RatingOne from \"@/registry/default/blocks/rating-01/components/rating-one\";\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"mt-10 flex items-center justify-center\">\r\n      <div className=\"relative w-full max-w-2xl mx-auto\">\r\n        <RatingOne />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:page",
      "target": "@/components/rating.tsx"
    },
    {
      "path": "blocks/rating-01/components/rating-one.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useState, useEffect, useId } from \"react\";\nimport { Star } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport useClickOutside from \"../hooks/useClickOutside\";\nimport { AnimatePresence, MotionConfig, motion } from \"motion/react\";\nimport { ArrowLeftIcon } from \"lucide-react\";\n\nconst TRANSITION = {\n  type: \"spring\",\n  bounce: 0.05,\n  duration: 0.3,\n};\n\ninterface StarRatingProps {\n  maxStars?: number;\n  defaultValue?: number;\n  onChange?: (rating: number) => void;\n  size?: number;\n}\n\nconst StarRating: React.FC<StarRatingProps> = ({\n  maxStars = 5,\n  defaultValue = 0,\n  onChange,\n  size = 24,\n}) => {\n  const [rating, setRating] = useState(defaultValue);\n  const [hoverRating, setHoverRating] = useState(0);\n\n  const handleClick = (value: number) => {\n    setRating(value);\n    onChange?.(value);\n  };\n\n  const uniqueId = useId();\n  const formContainerRef = useRef<HTMLDivElement>(\n    null as unknown as HTMLDivElement,\n  );\n  const [isOpen, setIsOpen] = useState(false);\n  const [note, setNote] = useState<null | string>(null);\n\n  const openMenu = () => {\n    setIsOpen(true);\n  };\n\n  const closeMenu = () => {\n    setIsOpen(false);\n    setNote(null);\n  };\n\n  useClickOutside(formContainerRef, () => {\n    closeMenu();\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        closeMenu();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex items-center justify-center gap-6\">\n        {[...Array(maxStars)].map((_, index) => {\n          const value = index + 1;\n          return (\n            <button\n              key={index}\n              className=\"transition-transform hover:scale-110 focus:outline-none\"\n              onMouseEnter={() => setHoverRating(value)}\n              onMouseLeave={() => setHoverRating(0)}\n              onClick={() => handleClick(value)}\n            >\n              <Star\n                size={size}\n                className={cn(\n                  \"transition-colors\",\n                  (hoverRating || rating) >= value\n                    ? \"fill-yellow-400 text-yellow-400\"\n                    : \"fill-none text-gray-300\",\n                )}\n              />\n            </button>\n          );\n        })}\n      </div>\n      <MotionConfig transition={TRANSITION}>\n        <div className=\"relative flex items-center justify-center\">\n          <motion.button\n            key=\"button\"\n            layoutId={`popover-${uniqueId}`}\n            className=\"flex h-9 items-center border border-zinc-950/10 bg-white px-3 text-zinc-950 dark:border-zinc-50/10 dark:bg-zinc-700 dark:text-zinc-50\"\n            style={{\n              borderRadius: 8,\n            }}\n            onClick={openMenu}\n          >\n            <motion.span\n              layoutId={`popover-label-${uniqueId}`}\n              className=\"text-sm\"\n            >\n              Write Review\n            </motion.span>\n          </motion.button>\n\n          <AnimatePresence>\n            {isOpen && (\n              <motion.div\n                ref={formContainerRef}\n                layoutId={`popover-${uniqueId}`}\n                className=\"absolute h-[200px] w-[364px] overflow-hidden border border-zinc-950/10 bg-white outline-none dark:bg-zinc-700\"\n                style={{\n                  borderRadius: 12,\n                }}\n              >\n                <form\n                  className=\"flex h-full flex-col\"\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                  }}\n                >\n                  <motion.span\n                    layoutId={`popover-label-${uniqueId}`}\n                    aria-hidden=\"true\"\n                    style={{\n                      opacity: note ? 0 : 1,\n                    }}\n                    className=\"absolute left-4 top-3 select-none text-sm text-zinc-500 dark:text-zinc-400\"\n                  >\n                    Write Message\n                  </motion.span>\n                  <textarea\n                    className=\"h-full w-full resize-none rounded-md bg-transparent px-4 py-3 text-sm outline-none\"\n                    autoFocus\n                    onChange={(e) => setNote(e.target.value)}\n                  />\n                  <div key=\"close\" className=\"flex justify-between px-4 py-3\">\n                    <button\n                      type=\"button\"\n                      className=\"flex items-center\"\n                      onClick={closeMenu}\n                      aria-label=\"Close popover\"\n                    >\n                      <ArrowLeftIcon\n                        size={16}\n                        className=\"text-zinc-900 dark:text-zinc-100\"\n                      />\n                    </button>\n                    <button\n                      className=\"relative ml-1 flex h-8 shrink-0 scale-100 select-none appearance-none items-center justify-center rounded-lg border border-zinc-950/10 bg-transparent px-2 text-sm text-zinc-500 transition-colors hover:bg-zinc-100 hover:text-zinc-800 focus-visible:ring-2 active:scale-[0.98] dark:border-zinc-50/10 dark:text-zinc-50 dark:hover:bg-zinc-800\"\n                      type=\"submit\"\n                      aria-label=\"Submit note\"\n                      onClick={() => {\n                        closeMenu();\n                      }}\n                    >\n                      Submit\n                    </button>\n                  </div>\n                </form>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </MotionConfig>\n    </>\n  );\n};\n\nconst RatingOne = () => {\n  return (\n    <div className=\"relative\">\n      <div className=\"w-full space-x-5 space-y-5\">\n        <h1 className=\"text-2xl font-bold text-center\">\n          Share Your Experience\n        </h1>\n        <p className=\"text-center text-gray-500\">\n          How was your search experience with our services?\n        </p>\n        <StarRating\n          onChange={(rating) => console.log(\"Star rating:\", rating)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default RatingOne;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/rating-01/hooks/useClickOutside.tsx",
      "content": "import { RefObject, useEffect } from \"react\";\n\n/**\n *\n * source [https://github.com/ibelick/motion-primitives/blob/main/hooks/useClickOutside.tsx ]\n */\nfunction useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void,\n): void {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (!ref || !ref.current || ref.current.contains(event.target as Node)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"touchstart\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"touchstart\", handleClickOutside);\n    };\n  }, [ref, handler]);\n}\n\nexport default useClickOutside;\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "300px"
  },
  "categories": [
    "rating"
  ]
}