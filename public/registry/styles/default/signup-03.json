{
  "name": "signup-03",
  "type": "registry:block",
  "description": "A Signup form with Step",
  "registryDependencies": [
    "button",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "blocks/signup-03/page.tsx",
      "content": "import SignupThree from \"@/registry/default/blocks/signup-03/components/signup-three\";\n\nexport default function Page() {\n  return <SignupThree />;\n}\n",
      "type": "registry:page",
      "target": "@/components/signup.tsx"
    },
    {
      "path": "blocks/signup-03/components/signup-three.tsx",
      "content": "\"use client\";\n\nimport React, { useState, ChangeEvent } from \"react\";\nimport Link from \"next/link\";\nimport {\n  Eye,\n  EyeOff,\n  ArrowRight,\n  CheckCircle2,\n  AlertCircle,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\"; // npx shadcn@latest add button\nimport { Input } from \"@/components/ui/input\"; // npx shadcn@latest add input\nimport { Label } from \"@/components/ui/label\"; // npx shadcn@latest add label\n\ninterface FormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  passwordConfirm: string;\n}\n\ninterface FormErrors {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  password?: string;\n  passwordConfirm?: string;\n}\n\ninterface ValidationRule {\n  test: (value: string) => boolean;\n  message: string;\n}\n\nconst INITIAL_FORM_STATE: FormData = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirm: \"\",\n};\n\nconst validationRules: Record<keyof FormData, ValidationRule[]> = {\n  firstName: [\n    {\n      test: (value) => value.trim().length > 0,\n      message: \"First name is required\",\n    },\n  ],\n  lastName: [\n    {\n      test: (value) => value.trim().length > 0,\n      message: \"Last name is required\",\n    },\n  ],\n  email: [\n    {\n      test: (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n      message: \"Valid email is required\",\n    },\n  ],\n  password: [\n    {\n      test: (value) => value.length >= 8,\n      message: \"Password must be at least 8 characters\",\n    },\n  ],\n  passwordConfirm: [\n    {\n      test: (value) => value.length >= 8,\n      message: \"Password confirmation must be at least 8 characters\",\n    },\n  ],\n};\n\nconst SignupThree: React.FC = () => {\n  const [step, setStep] = useState<number>(1);\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [formData, setFormData] = useState<FormData>(INITIAL_FORM_STATE);\n  const [errors, setErrors] = useState<FormErrors>({});\n\n  const validateField = (\n    field: keyof FormData,\n    value: string,\n  ): string | undefined => {\n    const rules = validationRules[field];\n    for (const rule of rules) {\n      if (!rule.test(value)) {\n        return rule.message;\n      }\n    }\n\n    if (field === \"passwordConfirm\" && value !== formData.password) {\n      return \"Passwords do not match\";\n    }\n\n    return undefined;\n  };\n\n  const handleInput = (field: keyof FormData, value: string): void => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    const error = validateField(field, value);\n    setErrors((prev) => ({\n      ...prev,\n      [field]: error,\n    }));\n  };\n\n  const validateStep1 = (): void => {\n    const newErrors: FormErrors = {};\n    let hasErrors = false;\n\n    ([\"firstName\", \"lastName\", \"email\"] as const).forEach((field) => {\n      const error = validateField(field, formData[field]);\n      if (error) {\n        newErrors[field] = error;\n        hasErrors = true;\n      }\n    });\n\n    setErrors(newErrors);\n    if (!hasErrors) {\n      setStep(2);\n    }\n  };\n\n  const validateStep2 = (): void => {\n    const newErrors: FormErrors = {};\n    let hasErrors = false;\n\n    ([\"password\", \"passwordConfirm\"] as const).forEach((field) => {\n      const error = validateField(field, formData[field]);\n      if (error) {\n        newErrors[field] = error;\n        hasErrors = true;\n      }\n    });\n\n    setErrors(newErrors);\n    if (!hasErrors) {\n      handleSubmit();\n    }\n  };\n\n  const handleSubmit = (): void => {\n    console.log(\"Form submitted:\", formData);\n  };\n\n  const renderInput = (\n    field: keyof FormData,\n    label: string,\n    type: string = \"text\",\n    placeholder: string = \"\",\n  ) => (\n    <div>\n      <Label htmlFor={field}>{label}</Label>\n      <div className={type === \"password\" ? \"relative\" : undefined}>\n        <Input\n          type={\n            type === \"password\" ? (showPassword ? \"text\" : \"password\") : type\n          }\n          id={field}\n          value={formData[field]}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            handleInput(field, e.target.value)\n          }\n          className={`mt-1 ${errors[field] ? \"border-red-500 focus:ring-red-200\" : \"\"} ${\n            type === \"password\" ? \"pr-10\" : \"\"\n          }`}\n          placeholder={placeholder}\n        />\n        {type === \"password\" && (\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword(!showPassword)}\n            className=\"absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600\"\n          >\n            {showPassword ? (\n              <EyeOff className=\"size-4\" />\n            ) : (\n              <Eye className=\"size-4\" />\n            )}\n          </button>\n        )}\n      </div>\n      {errors[field] && (\n        <p className=\"mt-1 text-sm text-red-500\">{errors[field]}</p>\n      )}\n    </div>\n  );\n\n  return (\n    <section className=\"min-h-screen bg-gradient-to-b from-slate-50 to-slate-100\">\n      <div className=\"lg:grid lg:min-h-screen lg:grid-cols-12\">\n        <aside className=\"relative hidden lg:block lg:order-last lg:col-span-5 lg:h-full xl:col-span-6\">\n          <div className=\"absolute inset-0 bg-slate-900\">\n            <div className=\"absolute inset-0 flex flex-col items-center justify-center p-12 text-white\">\n              <div className=\"max-w-xl space-y-8\">\n                <h2 className=\"text-3xl font-bold\">Join our community</h2>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle2 className=\"text-emerald-400\" />\n                    <p>30-day free trial, no credit card required</p>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle2 className=\"text-emerald-400\" />\n                    <p>Join 10,000+ happy users</p>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle2 className=\"text-emerald-400\" />\n                    <p>24/7 support team at your service</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </aside>\n\n        <main className=\"flex items-center justify-center px-8 py-8 sm:px-12 lg:col-span-7 lg:px-16 lg:py-12 xl:col-span-6\">\n          <div className=\"max-w-xl w-full\">\n            <div className=\"relative\">\n              <div className=\"absolute left-0 top-2 w-full\">\n                <div className=\"h-1 bg-slate-200 rounded\">\n                  <div\n                    className=\"h-1 bg-blue-600 rounded transition-all duration-300\"\n                    style={{ width: step === 1 ? \"50%\" : \"100%\" }}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-8\">\n              <h1 className=\"text-2xl font-bold text-slate-900\">\n                {step === 1 ? \"Create your account\" : \"Set your password\"}\n              </h1>\n              <p className=\"mt-2 text-sm text-slate-600\">\n                {step === 1\n                  ? \"Start your 30-day free trial today\"\n                  : \"Choose a secure password to protect your account\"}\n              </p>\n            </div>\n\n            {step === 1 ? (\n              <div className=\"mt-6 space-y-6\">\n                <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                  {renderInput(\"firstName\", \"First Name\", \"text\", \"John\")}\n                  {renderInput(\"lastName\", \"Last Name\", \"text\", \"Doe\")}\n                </div>\n                {renderInput(\"email\", \"Email\", \"email\", \"john@example.com\")}\n                <Button\n                  onClick={validateStep1}\n                  className=\"w-full flex items-center justify-center gap-2\"\n                >\n                  Continue <ArrowRight className=\"size-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div className=\"mt-6 space-y-6\">\n                {renderInput(\"password\", \"Password\", \"password\")}\n                {renderInput(\"passwordConfirm\", \"Confirm Password\", \"password\")}\n\n                <div className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"size-4 text-slate-400\" />\n                  <p className=\"text-sm text-slate-600\">\n                    Password must be at least 8 characters\n                  </p>\n                </div>\n\n                <Button onClick={validateStep2} className=\"w-full\">\n                  Create account\n                </Button>\n\n                <Button\n                  type=\"button\"\n                  variant={\"ghost\"}\n                  onClick={() => setStep(1)}\n                  className=\"w-full text-sm text-slate-600 hover:text-slate-900\"\n                >\n                  Back to previous step\n                </Button>\n              </div>\n            )}\n\n            <p className=\"mt-6 text-center text-sm text-slate-500\">\n              Already have an account?{\" \"}\n              <Link href=\"#\" className=\"text-blue-600 hover:text-blue-700\">\n                Log in\n              </Link>\n            </p>\n          </div>\n        </main>\n      </div>\n    </section>\n  );\n};\n\nexport default SignupThree;\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "meta": {
    "iframeHeight": "650px"
  },
  "categories": [
    "signup"
  ]
}