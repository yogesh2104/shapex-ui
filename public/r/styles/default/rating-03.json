{
  "name": "rating-03",
  "type": "registry:block",
  "description": "rating block 3",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "avatar",
    "button",
    "progress",
    "card",
    "select",
    "checkbox",
    "textarea",
    "label",
    "input"
  ],
  "files": [
    {
      "path": "blocks/rating/rating-03/rating-three.tsx",
      "content": "import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Star } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport ReviewForm from \"./write-review\";\n\ninterface Review {\n  author: string;\n  location: string;\n  rating: number;\n  date: string;\n  title: string;\n  content: string;\n}\n\ninterface Rating {\n  label: string;\n  value: number;\n}\n\nconst RatingThree = () => {\n  const ratings: Rating[] = [\n    { label: \"Reliability\", value: 4.1 },\n    { label: \"Payout rating\", value: 4.3 },\n    { label: \"Positive solutions\", value: 4.1 },\n  ];\n\n  const reviews: Review[] = [\n    {\n      author: \"Julia\",\n      location: \"Berlin\",\n      rating: 4,\n      date: \"Jan 11\",\n      title: \"Moved here from another insurance company\",\n      content:\n        \"Great car insurance company! Efficient and reliable service. Quick claims processing and excellent customer support. Affordable premiums and a wide range of coverage options\",\n    },\n    {\n      author: \"Kim\",\n      location: \"Frankfurt\",\n      rating: 3,\n      date: \"Jan 11\",\n      title: \"Decent Car Insurance Company with Room for Improvement\",\n      content:\n        \"Decent car insurance company. Average service and claims processing time. Customer support could be better. Premiums are somewhat affordable, but coverage options are limited.\",\n    },\n  ];\n\n  const renderStars = (rating: number) => {\n    return Array(5)\n      .fill(0)\n      .map((_, index) => (\n        <Star\n          key={index}\n          className={`w-5 h-5 ${\n            index < rating ? \"text-teal-500 fill-teal-500\" : \"text-gray-300\"\n          }`}\n        />\n      ));\n  };\n\n  return (\n    <div className=\"w-full p-6\">\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-4\">\n        <div className=\"col-span-1 md:col-span-2 md:row-span-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <Button variant=\"ghost\" className=\"p-2\">\n                  <svg\n                    className=\"w-6 h-6\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M15 19l-7-7 7-7\"\n                    />\n                  </svg>\n                </Button>\n              </div>\n              <CardTitle className=\"text-4xl font-bold\">\n                Reviews and ratings\n              </CardTitle>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-4xl font-bold\">4,7</span>\n                <div className=\"flex\">{renderStars(4.7)}</div>\n              </div>\n              <p className=\"text-gray-500\">Based on 565 ratings</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {ratings.map((rating) => (\n                  <div key={rating.label} className=\"space-y-1\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>{rating.label}</span>\n                      <span>{rating.value}</span>\n                    </div>\n                    <Progress value={rating.value * 20} className=\"h-2\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          <div className=\" mt-4 flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-bold\">Reviews 153</h2>\n            <div className=\"flex gap-4\">\n              <Select>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Verified\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"verified\">Verified</SelectItem>\n                  <SelectItem value=\"unverified\">Unverified</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"All ratings\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All ratings</SelectItem>\n                  <SelectItem value=\"5\">5 stars</SelectItem>\n                  <SelectItem value=\"4\">4 stars</SelectItem>\n                  <SelectItem value=\"3\">3 stars</SelectItem>\n                  <SelectItem value=\"2\">2 stars</SelectItem>\n                  <SelectItem value=\"1\">1 star</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-span-1 md:col-span-2 md:col-start-3\">\n          <div className=\"space-y-4\">\n            {reviews.map((review, index) => (\n              <Card key={index}>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Avatar>\n                        <div className=\"w-10 h-10 rounded-full bg-gray-200 text-black flex items-center justify-center\">\n                          {review.author[0]}\n                        </div>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-semibold\">\n                          {review.author}, {review.location}\n                        </p>\n                        <div className=\"flex\">{renderStars(review.rating)}</div>\n                      </div>\n                    </div>\n                    <span className=\"text-xs\">{review.date}</span>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">{review.title}</h3>\n                  <p className=\"text-primary/70\">{review.content}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"sticky bottom-1 w-full mt-1\">\n        <div className=\"flex justify-center\">\n          <ReviewForm />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RatingThree;\n",
      "type": "registry:component",
      "target": "components/shapexui/rating.tsx"
    },
    {
      "path": "blocks/rating/rating-03/dialog-box.tsx",
      "content": "\"use client\";\n\nimport React, {\n  RefObject,\n  useCallback,\n  useContext,\n  useEffect,\n  useId,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  motion,\n  AnimatePresence,\n  MotionConfig,\n  Transition,\n  Variant,\n} from \"motion/react\";\nimport { createPortal } from \"react-dom\";\nimport { cn } from \"@/lib/utils\";\nimport { XIcon } from \"lucide-react\";\n\ninterface DialogContextType {\n  isOpen: boolean;\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  uniqueId: string;\n  triggerRef: React.RefObject<HTMLDivElement>;\n}\n\n/**\n *\n * source [https://github.com/ibelick/motion-primitives/blob/main/hooks/useClickOutside.tsx ]\n */\nfunction useClickOutside<T extends HTMLElement>(\n  ref: RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void,\n): void {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (!ref || !ref.current || ref.current.contains(event.target as Node)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"touchstart\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"touchstart\", handleClickOutside);\n    };\n  }, [ref, handler]);\n}\n\n\nconst DialogContextProvider = React.createContext<DialogContextType | null>(\n  null,\n);\n\nfunction useDialog() {\n  const context = useContext(DialogContextProvider);\n  if (!context) {\n    throw new Error(\"useDialog must be used within a DialogContextProvider\");\n  }\n  return context;\n}\n\ntype DialogProviderProps = {\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\nfunction DialogProvider({ children, transition }: DialogProviderProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const uniqueId = useId();\n  const triggerRef = useRef<HTMLDivElement>(null as unknown as HTMLDivElement);\n\n  const contextValue = useMemo(\n    () => ({ isOpen, setIsOpen, uniqueId, triggerRef }),\n    [isOpen, uniqueId],\n  );\n\n  return (\n    <DialogContextProvider.Provider value={contextValue}>\n      <MotionConfig transition={transition}>{children}</MotionConfig>\n    </DialogContextProvider.Provider>\n  );\n}\n\ntype DialogProps = {\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\nfunction Dialog({ children, transition }: DialogProps) {\n  return (\n    <DialogProvider>\n      <MotionConfig transition={transition}>{children}</MotionConfig>\n    </DialogProvider>\n  );\n}\n\ntype DialogTriggerProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  triggerRef?: React.RefObject<HTMLDivElement>;\n};\n\nfunction DialogTrigger({\n  children,\n  className,\n  style,\n  triggerRef,\n}: DialogTriggerProps) {\n  const { setIsOpen, isOpen, uniqueId } = useDialog();\n\n  const handleClick = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen, setIsOpen]);\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Enter\" || event.key === \" \") {\n        event.preventDefault();\n        setIsOpen(!isOpen);\n      }\n    },\n    [isOpen, setIsOpen],\n  );\n\n  return (\n    <motion.div\n      ref={triggerRef}\n      layoutId={`dialog-${uniqueId}`}\n      className={cn(\"relative cursor-pointer\", className)}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      style={style}\n      role=\"button\"\n      aria-haspopup=\"dialog\"\n      aria-expanded={isOpen}\n      aria-controls={`motion-ui-morphing-dialog-content-${uniqueId}`}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogContext = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogContext({ children, className, style }: DialogContext) {\n  const { setIsOpen, isOpen, uniqueId, triggerRef } = useDialog();\n  const containerRef = useRef<HTMLDivElement>(\n    null as unknown as HTMLDivElement,\n  );\n  const [firstFocusableElement, setFirstFocusableElement] =\n    useState<HTMLElement | null>(null);\n  const [lastFocusableElement, setLastFocusableElement] =\n    useState<HTMLElement | null>(null);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        setIsOpen(false);\n      }\n      if (event.key === \"Tab\") {\n        if (!firstFocusableElement || !lastFocusableElement) return;\n\n        if (event.shiftKey) {\n          if (document.activeElement === firstFocusableElement) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          }\n        } else {\n          if (document.activeElement === lastFocusableElement) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          }\n        }\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [setIsOpen, firstFocusableElement, lastFocusableElement]);\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add(\"overflow-hidden\");\n      const focusableElements = containerRef.current?.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n      );\n      if (focusableElements && focusableElements.length > 0) {\n        setFirstFocusableElement(focusableElements[0] as HTMLElement);\n        setLastFocusableElement(\n          focusableElements[focusableElements.length - 1] as HTMLElement,\n        );\n        (focusableElements[0] as HTMLElement).focus();\n      }\n    } else {\n      document.body.classList.remove(\"overflow-hidden\");\n      triggerRef.current?.focus();\n    }\n  }, [isOpen, triggerRef]);\n\n  useClickOutside(containerRef, () => {\n    if (isOpen) {\n      setIsOpen(false);\n    }\n  });\n\n  return (\n    <motion.div\n      ref={containerRef}\n      layoutId={`dialog-${uniqueId}`}\n      className={cn(\"overflow-hidden\", className)}\n      style={style}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby={`motion-ui-morphing-dialog-title-${uniqueId}`}\n      aria-describedby={`motion-ui-morphing-dialog-description-${uniqueId}`}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogContentProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogContent({ children, className, style }: DialogContentProps) {\n  const { setIsOpen, isOpen, uniqueId, triggerRef } = useDialog();\n  const containerRef = useRef<HTMLDivElement>(\n    null as unknown as HTMLDivElement,\n  );\n  const [firstFocusableElement, setFirstFocusableElement] =\n    useState<HTMLElement | null>(null);\n  const [lastFocusableElement, setLastFocusableElement] =\n    useState<HTMLElement | null>(null);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        setIsOpen(false);\n      }\n      if (event.key === \"Tab\") {\n        if (!firstFocusableElement || !lastFocusableElement) return;\n\n        if (event.shiftKey) {\n          if (document.activeElement === firstFocusableElement) {\n            event.preventDefault();\n            lastFocusableElement.focus();\n          }\n        } else {\n          if (document.activeElement === lastFocusableElement) {\n            event.preventDefault();\n            firstFocusableElement.focus();\n          }\n        }\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [setIsOpen, firstFocusableElement, lastFocusableElement]);\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add(\"overflow-hidden\");\n      const focusableElements = containerRef.current?.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n      );\n      if (focusableElements && focusableElements.length > 0) {\n        setFirstFocusableElement(focusableElements[0] as HTMLElement);\n        setLastFocusableElement(\n          focusableElements[focusableElements.length - 1] as HTMLElement,\n        );\n        (focusableElements[0] as HTMLElement).focus();\n      }\n    } else {\n      document.body.classList.remove(\"overflow-hidden\");\n      triggerRef.current?.focus();\n    }\n  }, [isOpen, triggerRef]);\n\n  useClickOutside(containerRef, () => {\n    if (isOpen) {\n      setIsOpen(false);\n    }\n  });\n\n  return (\n    <motion.div\n      ref={containerRef}\n      layoutId={`dialog-${uniqueId}`}\n      className={cn(\"overflow-hidden\", className)}\n      style={style}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby={`motion-ui-morphing-dialog-title-${uniqueId}`}\n      aria-describedby={`motion-ui-morphing-dialog-description-${uniqueId}`}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype MorphingDialogContainerProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogContainer({ children }: MorphingDialogContainerProps) {\n  const { isOpen, uniqueId } = useDialog();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  return createPortal(\n    <AnimatePresence initial={false} mode=\"sync\">\n      {isOpen && (\n        <>\n          <motion.div\n            key={`backdrop-${uniqueId}`}\n            className=\"fixed inset-0 h-full w-full bg-white/40 backdrop-blur-sm dark:bg-black/40\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          />\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n            {children}\n          </div>\n        </>\n      )}\n    </AnimatePresence>,\n    document.body,\n  );\n}\n\ntype MorphingDialogTitleProps = {\n  children: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nfunction DialogTitle({ children, className, style }: MorphingDialogTitleProps) {\n  const { uniqueId } = useDialog();\n\n  return (\n    <motion.div\n      layoutId={`dialog-title-container-${uniqueId}`}\n      className={className}\n      style={style}\n      layout\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogDescriptionProps = {\n  children: React.ReactNode;\n  className?: string;\n  disableLayoutAnimation?: boolean;\n  variants?: {\n    initial: Variant;\n    animate: Variant;\n    exit: Variant;\n  };\n};\n\nfunction DialogDescription({\n  children,\n  className,\n  variants,\n  disableLayoutAnimation,\n}: DialogDescriptionProps) {\n  const { uniqueId } = useDialog();\n\n  return (\n    <motion.div\n      key={`dialog-description-${uniqueId}`}\n      layoutId={\n        disableLayoutAnimation\n          ? undefined\n          : `dialog-description-content-${uniqueId}`\n      }\n      variants={variants}\n      className={className}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      id={`dialog-description-${uniqueId}`}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ntype DialogCloseProps = {\n  children?: React.ReactNode;\n  className?: string;\n  variants?: {\n    initial: Variant;\n    animate: Variant;\n    exit: Variant;\n  };\n};\n\nfunction DialogClose({ children, className, variants }: DialogCloseProps) {\n  const { setIsOpen, uniqueId } = useDialog();\n\n  const handleClose = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  return (\n    <motion.button\n      onClick={handleClose}\n      type=\"button\"\n      aria-label=\"Close dialog\"\n      key={`dialog-close-${uniqueId}`}\n      className={cn(\"absolute right-6 top-6\", className)}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      variants={variants}\n    >\n      {children || <XIcon size={24} />}\n    </motion.button>\n  );\n}\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogContainer,\n  DialogContext,\n  DialogClose,\n  DialogTitle,\n  DialogDescription,\n};\n",
      "type": "registry:component",
      "target": "components/shapexui/dialog-box.tsx"
    },
    {
      "path": "blocks/rating/rating-03/write-review.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Card, CardContent } from \"@/registry/default/ui/card\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport { Input } from \"@/registry/default/ui/input\";\r\nimport { Label } from \"@/registry/default/ui/label\";\r\nimport { Textarea } from \"@/registry/default/ui/textarea\";\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\";\r\nimport {\r\n  Dialog,\r\n  DialogTrigger,\r\n  DialogClose,\r\n  DialogContainer,\r\n  DialogContent,\r\n} from \"./dialog-box\";\r\n\r\ninterface ReviewFormData {\r\n  rating: number;\r\n  title: string;\r\n  recommend: \"Yes\" | \"No\";\r\n  review: string;\r\n  nickname: string;\r\n  email: string;\r\n  acceptTerms: boolean;\r\n}\r\n\r\nconst ReviewForm = () => {\r\n  const [formData, setFormData] = useState<ReviewFormData>({\r\n    rating: 0,\r\n    title: \"\",\r\n    recommend: \"Yes\",\r\n    review: \"\",\r\n    nickname: \"\",\r\n    email: \"\",\r\n    acceptTerms: false,\r\n  });\r\n\r\n  const handleStarClick = (rating: number) => {\r\n    setFormData((prev) => ({ ...prev, rating }));\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    console.log(\"Form submitted:\", formData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        transition={{\r\n          type: \"spring\",\r\n          stiffness: 200,\r\n          damping: 24,\r\n        }}\r\n      >\r\n        <DialogTrigger\r\n          style={{ borderRadius: \"4px\" }}\r\n          className=\"border bg-white text-black border-gray-200/60 h-10 px-5 text-center flex justify-center items-center\"\r\n        >\r\n          Write Review\r\n        </DialogTrigger>\r\n        <DialogContainer>\r\n          <DialogContent>\r\n            <Card className=\"w-full max-w-xl mx-auto\">\r\n              <CardContent className=\"pt-3\">\r\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <h2 className=\"text-xl font-semibold\">Overall rating</h2>\r\n                    <div className=\"flex justify-center gap-5\">\r\n                      {[1, 2, 3, 4, 5].map((star) => (\r\n                        <button\r\n                          key={star}\r\n                          type=\"button\"\r\n                          onClick={() => handleStarClick(star)}\r\n                          className=\"text-2xl focus-visible:ring-offset-0\"\r\n                        >\r\n                          <span\r\n                            className={`text-2xl ${formData.rating >= star ? \"text-teal-500 \" : \"text-gray-300\"}`}\r\n                          >\r\n                            ★\r\n                          </span>\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"title\">Review title</Label>\r\n                    <Input\r\n                      id=\"title\"\r\n                      placeholder=\"Example: Easy to use\"\r\n                      value={formData.title}\r\n                      onChange={(e) =>\r\n                        setFormData((prev) => ({\r\n                          ...prev,\r\n                          title: e.target.value,\r\n                        }))\r\n                      }\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"review\">Product review</Label>\r\n                    <Textarea\r\n                      id=\"review\"\r\n                      placeholder=\"Example: Since I bought this a month ago, it has been used a lot. What I like best/what is worst about this product is ...\"\r\n                      value={formData.review}\r\n                      onChange={(e) =>\r\n                        setFormData((prev) => ({\r\n                          ...prev,\r\n                          review: e.target.value,\r\n                        }))\r\n                      }\r\n                      className=\"min-h-[100px]\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"nickname\">Nickname</Label>\r\n                      <Input\r\n                        id=\"nickname\"\r\n                        placeholder=\"Example: bob27\"\r\n                        value={formData.nickname}\r\n                        onChange={(e) =>\r\n                          setFormData((prev) => ({\r\n                            ...prev,\r\n                            nickname: e.target.value,\r\n                          }))\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"email\">Email address</Label>\r\n                      <Input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"Example: your@email.com\"\r\n                        value={formData.email}\r\n                        onChange={(e) =>\r\n                          setFormData((prev) => ({\r\n                            ...prev,\r\n                            email: e.target.value,\r\n                          }))\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id=\"terms\"\r\n                      checked={formData.acceptTerms}\r\n                      onCheckedChange={(checked) =>\r\n                        setFormData((prev) => ({\r\n                          ...prev,\r\n                          acceptTerms: checked as boolean,\r\n                        }))\r\n                      }\r\n                    />\r\n                    <Label htmlFor=\"terms\" className=\"text-sm\">\r\n                      I accept the terms and conditions\r\n                    </Label>\r\n                  </div>\r\n\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    You will be able to receive emails in connection with this\r\n                    review (eg if others comment on your review). All emails\r\n                    contain the option to unsubscribe. We can use the text and\r\n                    star rating from your review in other marketing.\r\n                  </p>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant={\"secondary\"}\r\n                    className=\"w-full\"\r\n                  >\r\n                    Submit product review\r\n                  </Button>\r\n                </form>\r\n              </CardContent>\r\n            </Card>\r\n            <DialogClose className=\"text-zinc-500\" />\r\n          </DialogContent>\r\n        </DialogContainer>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReviewForm;\r\n",
      "type": "registry:component",
      "target": "components/shapexui/write-review.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "610px"
  },
  "categories": [
    "rating"
  ]
}