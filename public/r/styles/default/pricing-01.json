{
  "name": "pricing-01",
  "type": "registry:block",
  "description": "pricing block 1",
  "dependencies": [
    "framer-motion"
  ],
  "registryDependencies": [
    "card",
    "button",
    "switch"
  ],
  "files": [
    {
      "path": "blocks/pricing/pricing-01/pricing-one.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Check } from \"lucide-react\";\nimport { cn } from \"@/registry/default/lib/utils\";\nimport { Switch } from \"@/registry/default/ui/switch\";\nimport { Button } from \"@/registry/default/ui/button\";\nimport PriceSlider from \"./price-slider\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/default/ui/card\";\n\ninterface Feature {\n  title: string;\n  description: string;\n}\n\ninterface PricingTier {\n  title: string;\n  monthlyConversions: string;\n  description: string;\n  price: string | \"Let's talk\";\n  features: Feature[];\n  gradient: string;\n}\n\nconst PricingFour = () => {\n  const [isYearly, setIsYearly] = React.useState(false);\n  const [sliderValue, setSliderValue] = React.useState(50);\n\n  const pricingTiers: PricingTier[] = [\n    {\n      title: \"Basic\",\n      monthlyConversions: \"Up to 50 Monthly Conversions\",\n      description:\n        \"Perfect for small businesses and startups looking to establish their online presence.\",\n      price: \"5\",\n      gradient: \"from-blue-500 to-blue-600\",\n      features: [\n        {\n          title: \"Standard\",\n          description: \"Account Performance Reporting\",\n        },\n        {\n          title: \"Affiliate\",\n          description: \"Affiliate Marketplace, Recruiting\",\n        },\n        {\n          title: \"Basic\",\n          description: \"Affiliate Payments\",\n        },\n      ],\n    },\n    {\n      title: \"Enterprise\",\n      monthlyConversions: \"Unlimited Conversions Monthly\",\n      description:\n        \"Ideal for growing businesses with higher conversion needs and advanced features.\",\n      price: \"10\",\n      gradient: \"from-green-500 to-green-600\",\n      features: [\n        {\n          title: \"Setup\",\n          description: \"Account and onboarding call\",\n        },\n        {\n          title: \"Management\",\n          description: \"Account Dedicated rep\",\n        },\n        {\n          title: \"Custom\",\n          description: \"Account Performance Reporting\",\n        },\n      ],\n    },\n    {\n      title: \"Enterprise Plus\",\n      monthlyConversions: \"Unlimited Conversions Monthly\",\n      description:\n        \"For large organizations requiring premium support and customized solutions.\",\n      price: \"20\",\n      gradient: \"from-purple-500 to-purple-600\",\n      features: [\n        {\n          title: \"Setup\",\n          description: \"Account and Premium Onboarding,\",\n        },\n        {\n          title: \"Management\",\n          description: \"Premium account management\",\n        },\n        {\n          title: \"Custom\",\n          description: \"Account Performance Reporting\",\n        },\n      ],\n    },\n  ];\n\n  return (\n    <div className=\"container mx-auto py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"text-center mb-16\">\n        <h2 className=\"text-base font-semibold text-blue-600 tracking-wide uppercase\">\n          Pricing\n        </h2>\n        <h1 className=\"mt-2 text-4xl font-extrabold sm:text-5xl sm:tracking-tight lg:text-6xl\">\n          Simple, Transparent Pricing\n        </h1>\n        <p className=\"mt-4 max-w-xl mx-auto text-xl \">\n          Choose the plan that's right for you and start converting today.\n        </p>\n      </div>\n\n      <div className=\"mb-12\">\n        <PriceSlider\n          minValue={0}\n          maxValue={100}\n          defaultValue={sliderValue}\n          setSliderValue={setSliderValue}\n        />\n      </div>\n\n      <div className=\"flex items-center justify-center space-x-4 mb-12\">\n        <span className={\"font-medium dark:text-white text-black\"}>\n          Monthly\n        </span>\n        <Switch checked={isYearly} onCheckedChange={setIsYearly} />\n        <span className={\"font-medium dark:text-white text-black\"}>Yearly</span>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-3\">\n        {pricingTiers?.map((plan, idx) => {\n          const basePrice = parseInt(plan.price);\n          const isBasic = plan.title === \"Basic\";\n          const calculatedPrice = isBasic\n            ? isYearly\n              ? 12 * basePrice\n              : basePrice\n            : sliderValue * basePrice * (isYearly ? 12 * 0.8 : 1);\n\n          return (\n            <Card\n              key={idx}\n              className={`overflow-hidden shadow-lg transition-all duration-300 hover:shadow-xl`}\n            >\n              <CardHeader\n                className={`py-8 px-6 bg-gradient-to-br ${plan.gradient} text-white`}\n              >\n                <CardTitle className=\"text-2xl font-bold\">\n                  {plan.title}\n                </CardTitle>\n                <p className=\"text-lg opacity-90\">{plan.monthlyConversions}</p>\n              </CardHeader>\n              <CardContent className=\"p-6 bg-white\">\n                <div className=\"mb-6 text-center\">\n                  <span className=\"text-5xl font-extrabold text-black\">\n                    ${calculatedPrice.toFixed(0)}\n                  </span>\n                  <span className=\"text-xl text-gray-500 ml-2\">\n                    /{isYearly ? \"year\" : \"month\"}\n                  </span>\n\n                  {isBasic ? (\n                    <p className={cn(\"mt-1 text-sm text-gray-500\")}>1 user</p>\n                  ) : (\n                    <p className={cn(\"mt-1 text-sm text-gray-500\")}>\n                      {sliderValue} user{sliderValue !== 1 ? \"s\" : \"\"}\n                    </p>\n                  )}\n                </div>\n                <p className=\"text-gray-600 mb-6\">{plan.description}</p>\n                <ul className=\"space-y-4\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-start gap-3\">\n                      <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\n                      <div>\n                        <div className=\"font-medium text-black\">\n                          {feature.title}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {feature.description}\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n              <CardFooter className=\"p-6 bg-gray-50\">\n                <Button className=\"w-full\" variant=\"outline\">\n                  Choose {plan.title}\n                </Button>\n              </CardFooter>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PricingFour;\n",
      "type": "registry:component",
      "target": "components/shapexui/pricing.tsx"
    },
    {
      "path": "blocks/pricing/pricing-01/price-slider.tsx",
      "content": "\"use client\";\n\nimport { useEffect } from \"react\";\nimport { motion, useSpring, useMotionValue, useTransform } from \"framer-motion\";\n\ninterface ScaleSliderProps {\n  defaultValue: number;\n  minValue: number;\n  maxValue: number;\n  damping?: number;\n  stiffness?: number;\n  setSliderValue: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst PriceSlider: React.FC<ScaleSliderProps> = ({\n  defaultValue,\n  minValue,\n  maxValue,\n  damping = 20,\n  stiffness = 300,\n  setSliderValue,\n}) => {\n  const range = maxValue - minValue;\n  const notchSize = 100 / range;\n\n  const x = useMotionValue(((defaultValue - minValue) / range) * 100);\n  const xSpring = useSpring(x, { damping, stiffness });\n  const width = useTransform(xSpring, [0, 100], [\"0%\", \"100%\"]);\n\n  const progress = useTransform(x, (latest) => {\n    return (latest % notchSize) / notchSize;\n  });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseFloat(e.target.value);\n    x.set(newValue);\n  };\n\n  const handleDragEnd = () => {\n    const closestNotch = Math.round(x.get() / notchSize) * notchSize;\n    x.set(closestNotch);\n  };\n\n  useEffect(() => {\n    const unsubscribe = x.onChange((latest) => {\n      const newValue = Math.round((latest / 100) * range) + minValue;\n      if (newValue !== defaultValue) {\n        setSliderValue(newValue);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [x, notchSize, defaultValue, range, minValue]);\n\n  return (\n    <div className=\"mx-auto mt-8 w-full\">\n      <div className=\"relative flex h-12 items-center gap-3 rounded-full bg-black pl-4 pr-6 dark:bg-white\">\n        <div className=\"relative h-1/3 w-full\">\n          {/* Slider */}\n          <motion.div\n            className=\"absolute inset-y-0 left-0 z-10 rounded-l-full bg-white dark:bg-black\"\n            style={{ width }}\n          >\n            {/* Thumb */}\n            <motion.div className=\"absolute right-0 top-1/2 size-6 -translate-y-1/2 translate-x-1/2 rounded-full border-2 border-neutral-800 bg-white shadow-md dark:bg-black text-[10px] flex justify-center items-center\">\n              {x.get()}\n            </motion.div>\n          </motion.div>\n\n          {/* Slider input */}\n          <input\n            type=\"range\"\n            min={minValue}\n            max={maxValue}\n            value={x.get()}\n            onChange={handleChange}\n            onPointerUp={handleDragEnd}\n            className=\"absolute -inset-x-3 inset-y-0 z-20 w-[calc(100%+1.5rem)] cursor-pointer opacity-0\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PriceSlider;\n",
      "type": "registry:component",
      "target": "components/shapexui/price-slider.tsx"
    }
  ],
  "categories": [
    "pricing"
  ]
}