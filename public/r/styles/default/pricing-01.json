{
  "name": "pricing-01",
  "type": "registry:block",
  "description": "pricing block 1",
  "dependencies": [
    "framer-motion"
  ],
  "registryDependencies": [
    "card",
    "button",
    "switch"
  ],
  "files": [
    {
      "path": "blocks/pricing/pricing-01/pricing-one.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Check } from \"lucide-react\";\r\nimport { cn } from \"@/registry/default/lib/utils\";\r\nimport { Switch } from \"@/registry/default/ui/switch\";\r\nimport { Button } from \"@/registry/default/ui/button\";\r\nimport PriceSlider from \"./price-slider\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/registry/default/ui/card\";\r\n\r\ninterface Feature {\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\ninterface PricingTier {\r\n  title: string;\r\n  monthlyConversions: string;\r\n  description: string;\r\n  price: string | \"Let's talk\";\r\n  features: Feature[];\r\n  gradient: string;\r\n}\r\n\r\nconst Pricing = () => {\r\n  const [isYearly, setIsYearly] = React.useState(false);\r\n  const [sliderValue, setSliderValue] = React.useState(50);\r\n\r\n  const pricingTiers: PricingTier[] = [\r\n    {\r\n      title: \"Basic\",\r\n      monthlyConversions: \"Up to 50 Monthly Conversions\",\r\n      description:\r\n        \"Perfect for small businesses and startups looking to establish their online presence.\",\r\n      price: \"5\",\r\n      gradient: \"from-blue-500 to-blue-600\",\r\n      features: [\r\n        {\r\n          title: \"Standard\",\r\n          description: \"Account Performance Reporting\",\r\n        },\r\n        {\r\n          title: \"Affiliate\",\r\n          description: \"Affiliate Marketplace, Recruiting\",\r\n        },\r\n        {\r\n          title: \"Basic\",\r\n          description: \"Affiliate Payments\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Enterprise\",\r\n      monthlyConversions: \"Unlimited Conversions Monthly\",\r\n      description:\r\n        \"Ideal for growing businesses with higher conversion needs and advanced features.\",\r\n      price: \"10\",\r\n      gradient: \"from-green-500 to-green-600\",\r\n      features: [\r\n        {\r\n          title: \"Setup\",\r\n          description: \"Account and onboarding call\",\r\n        },\r\n        {\r\n          title: \"Management\",\r\n          description: \"Account Dedicated rep\",\r\n        },\r\n        {\r\n          title: \"Custom\",\r\n          description: \"Account Performance Reporting\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Enterprise Plus\",\r\n      monthlyConversions: \"Unlimited Conversions Monthly\",\r\n      description:\r\n        \"For large organizations requiring premium support and customized solutions.\",\r\n      price: \"20\",\r\n      gradient: \"from-purple-500 to-purple-600\",\r\n      features: [\r\n        {\r\n          title: \"Setup\",\r\n          description: \"Account and Premium Onboarding,\",\r\n        },\r\n        {\r\n          title: \"Management\",\r\n          description: \"Premium account management\",\r\n        },\r\n        {\r\n          title: \"Custom\",\r\n          description: \"Account Performance Reporting\",\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-16 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"text-center mb-16\">\r\n        <h2 className=\"text-base font-semibold text-blue-600 tracking-wide uppercase\">\r\n          Pricing\r\n        </h2>\r\n        <h1 className=\"mt-2 text-4xl font-extrabold sm:text-5xl sm:tracking-tight lg:text-6xl\">\r\n          Simple, Transparent Pricing\r\n        </h1>\r\n        <p className=\"mt-4 max-w-xl mx-auto text-xl \">\r\n          Choose the plan that's right for you and start converting today.\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"mb-12\">\r\n        <PriceSlider\r\n          minValue={0}\r\n          maxValue={100}\r\n          defaultValue={sliderValue}\r\n          setSliderValue={setSliderValue}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex items-center justify-center space-x-4 mb-12\">\r\n        <span className={\"font-medium dark:text-white text-black\"}>\r\n          Monthly\r\n        </span>\r\n        <Switch checked={isYearly} onCheckedChange={setIsYearly} />\r\n        <span className={\"font-medium dark:text-white text-black\"}>Yearly</span>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-3\">\r\n        {pricingTiers?.map((plan, idx) => {\r\n          const basePrice = parseInt(plan.price);\r\n          const isBasic = plan.title === \"Basic\";\r\n          const calculatedPrice = isBasic\r\n            ? isYearly\r\n              ? 12 * basePrice\r\n              : basePrice\r\n            : sliderValue * basePrice * (isYearly ? 12 * 0.8 : 1);\r\n\r\n          return (\r\n            <Card\r\n              key={idx}\r\n              className={`overflow-hidden shadow-lg transition-all duration-300 hover:shadow-xl`}\r\n            >\r\n              <CardHeader\r\n                className={`py-8 px-6 bg-gradient-to-br ${plan.gradient} text-white`}\r\n              >\r\n                <CardTitle className=\"text-2xl font-bold\">\r\n                  {plan.title}\r\n                </CardTitle>\r\n                <p className=\"text-lg opacity-90\">{plan.monthlyConversions}</p>\r\n              </CardHeader>\r\n              <CardContent className=\"p-6 bg-white\">\r\n                <div className=\"mb-6 text-center\">\r\n                  <span className=\"text-5xl font-extrabold text-black\">\r\n                    ${calculatedPrice.toFixed(0)}\r\n                  </span>\r\n                  <span className=\"text-xl text-gray-500 ml-2\">\r\n                    /{isYearly ? \"year\" : \"month\"}\r\n                  </span>\r\n\r\n                  {isBasic ? (\r\n                    <p className={cn(\"mt-1 text-sm text-gray-500\")}>1 user</p>\r\n                  ) : (\r\n                    <p className={cn(\"mt-1 text-sm text-gray-500\")}>\r\n                      {sliderValue} user{sliderValue !== 1 ? \"s\" : \"\"}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                <p className=\"text-gray-600 mb-6\">{plan.description}</p>\r\n                <ul className=\"space-y-4\">\r\n                  {plan.features.map((feature, featureIndex) => (\r\n                    <li key={featureIndex} className=\"flex items-start gap-3\">\r\n                      <Check className=\"h-5 w-5 text-green-500 shrink-0 mt-0.5\" />\r\n                      <div>\r\n                        <div className=\"font-medium text-black\">\r\n                          {feature.title}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500\">\r\n                          {feature.description}\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </CardContent>\r\n              <CardFooter className=\"p-6 bg-gray-50\">\r\n                <Button className=\"w-full\" variant=\"outline\">\r\n                  Choose {plan.title}\r\n                </Button>\r\n              </CardFooter>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pricing;\r\n",
      "type": "registry:component",
      "target": "components/shapexui/pricing.tsx"
    },
    {
      "path": "blocks/pricing/pricing-01/price-slider.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { motion, useSpring, useMotionValue, useTransform } from \"framer-motion\";\r\n\r\ninterface ScaleSliderProps {\r\n  defaultValue: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  damping?: number;\r\n  stiffness?: number;\r\n  setSliderValue: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst PriceSlider: React.FC<ScaleSliderProps> = ({\r\n  defaultValue,\r\n  minValue,\r\n  maxValue,\r\n  damping = 20,\r\n  stiffness = 300,\r\n  setSliderValue,\r\n}) => {\r\n  const range = maxValue - minValue;\r\n  const notchSize = 100 / range;\r\n\r\n  const x = useMotionValue(((defaultValue - minValue) / range) * 100);\r\n  const xSpring = useSpring(x, { damping, stiffness });\r\n  const width = useTransform(xSpring, [0, 100], [\"0%\", \"100%\"]);\r\n\r\n  const progress = useTransform(x, (latest) => {\r\n    return (latest % notchSize) / notchSize;\r\n  });\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = parseFloat(e.target.value);\r\n    x.set(newValue);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    const closestNotch = Math.round(x.get() / notchSize) * notchSize;\r\n    x.set(closestNotch);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = x.onChange((latest) => {\r\n      const newValue = Math.round((latest / 100) * range) + minValue;\r\n      if (newValue !== defaultValue) {\r\n        setSliderValue(newValue);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [x, notchSize, defaultValue, range, minValue]);\r\n\r\n  return (\r\n    <div className=\"mx-auto mt-8 w-full\">\r\n      <div className=\"relative flex h-12 items-center gap-3 rounded-full bg-black pl-4 pr-6 dark:bg-white\">\r\n        <div className=\"relative h-1/3 w-full\">\r\n          {/* Slider */}\r\n          <motion.div\r\n            className=\"absolute inset-y-0 left-0 z-10 rounded-l-full bg-white dark:bg-black\"\r\n            style={{ width }}\r\n          >\r\n            {/* Thumb */}\r\n            <motion.div className=\"absolute right-0 top-1/2 size-6 -translate-y-1/2 translate-x-1/2 rounded-full border-2 border-neutral-800 bg-white shadow-md dark:bg-black text-[10px] flex justify-center items-center\">\r\n              {x.get()}\r\n            </motion.div>\r\n          </motion.div>\r\n\r\n          {/* Slider input */}\r\n          <input\r\n            type=\"range\"\r\n            min={minValue}\r\n            max={maxValue}\r\n            value={x.get()}\r\n            onChange={handleChange}\r\n            onPointerUp={handleDragEnd}\r\n            className=\"absolute -inset-x-3 inset-y-0 z-20 w-[calc(100%+1.5rem)] cursor-pointer opacity-0\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PriceSlider;\r\n",
      "type": "registry:component",
      "target": "components/shapexui/price-slider.tsx"
    }
  ],
  "categories": [
    "pricing"
  ]
}