{
  "name": "faq-01",
  "type": "registry:block",
  "description": "A FQAs block",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "registryDependencies": [
    "accordion",
    "badge"
  ],
  "files": [
    {
      "path": "blocks/faq/faq-01/faq-one.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n} from \"./tabs\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/registry/default/ui/accordion\";\nimport { Badge } from \"@/registry/default/ui/badge\";\n\ntype ViewType = \"general\" | \"icons\" | \"library\";\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n  id: string; // this item is use for key\n}\n\ninterface FAQSection {\n  category: string;\n  items: FAQItem[];\n}\n\ninterface FAQAccordionProps {\n  category: string;\n  items: FAQItem[];\n}\n\nconst FAQ_SECTIONS: Record<ViewType, FAQSection> = {\n  general: {\n    category: \"General\",\n    items: [\n      {\n        id: \"what-is\",\n        question: \"What is ShapeX UI?\",\n        answer:\n          \"ShapeX UI is a comprehensive design system and UI kit that helps designers and developers create consistent, beautiful interfaces.\",\n      },\n      {\n        id: \"why-need\",\n        question: \"Why do I need a UI kit?\",\n        answer:\n          \"A UI kit helps maintain consistency across your projects, speeds up your workflow, and ensures best practices in design and development.\",\n      },\n      {\n        id: \"what does it offer\",\n        question: \"What is this UI library, and what does it offer?\",\n        answer:\n          \"This UI library is built on top of ShadCN UI and includes 30+ pre-designed components such as headers, footers, login forms, sign-up forms, FAQs, CTAs, contact sections, and more. It allows developers to quickly build high-quality user interfaces with ease.\",\n      },\n      {\n        id: \"tech stack\",\n        question: \"Is this library compatible with my projectâ€™s tech stack?\",\n        answer:\n          \"Yes, the library is compatible with modern JavaScript frameworks like React.js and Next.js. It is designed to integrate seamlessly with Tailwind CSS, as it is built on ShadCN UI principles.\",\n      },\n      {\n        id: \"design needs\",\n        question: \"Can I customize the components to fit my design needs?\",\n        answer:\n          \"Absolutely! All components are fully customizable and allow you to tweak styles, variants, and layouts using Tailwind CSS or additional configurations.\",\n      },\n      {\n        id: \"dark mode\",\n        question: \"Does this library support dark mode?\",\n        answer:\n          \"Yes, the library fully supports dark mode out of the box. You can toggle between light and dark themes or configure the components to match your application's theme.\",\n      },\n      {\n        id: \"mobile-friendly\",\n        question: \"Are the components responsive and mobile-friendly?\",\n        answer:\n          \"Yes, all components are designed to be fully responsive, ensuring that they look great on devices of all sizes, from desktops to mobile phones.\",\n      },\n      {\n        id: \"open-source or paid\",\n        question: \"Is this library open-source or paid?\",\n        answer: \"The library is open-source.\",\n      },\n      {\n        id: \"request new features\",\n        question:\n          \"How can I contribute to or request new features for the library?\",\n        answer:\n          \"Contributions are welcome! You can open issues or pull requests on our GitHub repository.\",\n      },\n    ],\n  },\n  icons: {\n    category: \"Icons\",\n    items: [\n      {\n        id: \"icon-formats\",\n        question: \"What icon formats are supported?\",\n        answer:\n          \"Our icons are available in multiple formats including SVG, PDF, and AI files.\",\n      },\n    ],\n  },\n  library: {\n    category: \"Library\",\n    items: [\n      {\n        id: \"library-access\",\n        question: \"How do I access the library?\",\n        answer:\n          \"The library is available through our web platform after logging in to your account.\",\n      },\n    ],\n  },\n};\n\nconst FAQAccordion: React.FC<FAQAccordionProps> = ({ category, items }) => (\n  <div className=\"\">\n    <Badge variant={\"outline\"} className=\"py-2 px-6 rounded-md\">\n      {category}\n    </Badge>\n    <Accordion type=\"single\" collapsible className=\"w-full\">\n      {items.map((faq) => (\n        <AccordionItem key={faq.id} value={faq.id}>\n          <AccordionTrigger className=\"text-left hover:no-underline\">\n            {faq.question}\n          </AccordionTrigger>\n          <AccordionContent>{faq.answer}</AccordionContent>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  </div>\n);\n\nexport default function FAQSection() {\n  const [activeView, setActiveView] = useState<ViewType>(\"general\");\n\n  return (\n    <div className=\"container mx-auto px-4 py-16 max-w-4xl\">\n      <header className=\"text-center mb-12\">\n        <p className=\"text-sm font-medium text-primary mb-2\">FAQs</p>\n        <h1 className=\"text-4xl font-bold tracking-tight mb-4\">\n          Frequently asked questions\n        </h1>\n        <p className=\"text-xl text-muted-foreground\">\n          Need help with something? Here are our most frequently asked\n          questions.\n        </p>\n      </header>\n\n      <div className=\"flex justify-center sticky top-2\">\n        <Tabs\n          defaultValue=\"general\"\n          onValueChange={(value) => setActiveView(value as ViewType)}\n          className=\"mb-8 max-w-xl border rounded-xl bg-background\"\n        >\n          <TabsList className=\"w-full justify-start h-12 p-1\">\n            <TabsTrigger value=\"general\">General FAQs</TabsTrigger>\n            <TabsTrigger value=\"icons\">UI Icons</TabsTrigger>\n            <TabsTrigger value=\"library\">Library</TabsTrigger>\n          </TabsList>\n        </Tabs>\n      </div>\n\n      <FAQAccordion\n        category={FAQ_SECTIONS[activeView].category}\n        items={FAQ_SECTIONS[activeView].items}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/shapexui/faq.tsx"
    },
    {
      "path": "blocks/faq/faq-01/tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md p-1 text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center whitespace-nowrap rounded-lg px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border data-[state=active]:text-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
      "type": "registry:component",
      "target": "components/shapexui/tabs.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "600px"
  },
  "categories": [
    "faq"
  ]
}