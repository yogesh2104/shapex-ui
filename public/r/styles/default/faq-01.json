{
  "name": "faq-01",
  "type": "registry:block",
  "description": "A FQAs block",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "registryDependencies": [
    "accordion",
    "badge"
  ],
  "files": [
    {
      "path": "blocks/faq/faq-01/faq-one.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport {\r\n  Tabs,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"./tabs\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/registry/default/ui/accordion\";\r\nimport { Badge } from \"@/registry/default/ui/badge\";\r\n\r\ntype ViewType = \"general\" | \"icons\" | \"library\";\r\n\r\ninterface FAQItem {\r\n  question: string;\r\n  answer: string;\r\n  id: string; // this item is use for key\r\n}\r\n\r\ninterface FAQSection {\r\n  category: string;\r\n  items: FAQItem[];\r\n}\r\n\r\ninterface FAQAccordionProps {\r\n  category: string;\r\n  items: FAQItem[];\r\n}\r\n\r\nconst FAQ_SECTIONS: Record<ViewType, FAQSection> = {\r\n  general: {\r\n    category: \"General\",\r\n    items: [\r\n      {\r\n        id: \"what-is\",\r\n        question: \"What is ShapeX UI?\",\r\n        answer:\r\n          \"ShapeX UI is a comprehensive design system and UI kit that helps designers and developers create consistent, beautiful interfaces.\",\r\n      },\r\n      {\r\n        id: \"why-need\",\r\n        question: \"Why do I need a UI kit?\",\r\n        answer:\r\n          \"A UI kit helps maintain consistency across your projects, speeds up your workflow, and ensures best practices in design and development.\",\r\n      },\r\n      {\r\n        id: \"what does it offer\",\r\n        question: \"What is this UI library, and what does it offer?\",\r\n        answer:\r\n          \"This UI library is built on top of ShadCN UI and includes 30+ pre-designed components such as headers, footers, login forms, sign-up forms, FAQs, CTAs, contact sections, and more. It allows developers to quickly build high-quality user interfaces with ease.\",\r\n      },\r\n      {\r\n        id: \"tech stack\",\r\n        question: \"Is this library compatible with my projectâ€™s tech stack?\",\r\n        answer:\r\n          \"Yes, the library is compatible with modern JavaScript frameworks like React.js and Next.js. It is designed to integrate seamlessly with Tailwind CSS, as it is built on ShadCN UI principles.\",\r\n      },\r\n      {\r\n        id: \"design needs\",\r\n        question: \"Can I customize the components to fit my design needs?\",\r\n        answer:\r\n          \"Absolutely! All components are fully customizable and allow you to tweak styles, variants, and layouts using Tailwind CSS or additional configurations.\",\r\n      },\r\n      {\r\n        id: \"dark mode\",\r\n        question: \"Does this library support dark mode?\",\r\n        answer:\r\n          \"Yes, the library fully supports dark mode out of the box. You can toggle between light and dark themes or configure the components to match your application's theme.\",\r\n      },\r\n      {\r\n        id: \"mobile-friendly\",\r\n        question: \"Are the components responsive and mobile-friendly?\",\r\n        answer:\r\n          \"Yes, all components are designed to be fully responsive, ensuring that they look great on devices of all sizes, from desktops to mobile phones.\",\r\n      },\r\n      {\r\n        id: \"open-source or paid\",\r\n        question: \"Is this library open-source or paid?\",\r\n        answer: \"The library is open-source.\",\r\n      },\r\n      {\r\n        id: \"request new features\",\r\n        question:\r\n          \"How can I contribute to or request new features for the library?\",\r\n        answer:\r\n          \"Contributions are welcome! You can open issues or pull requests on our GitHub repository.\",\r\n      },\r\n    ],\r\n  },\r\n  icons: {\r\n    category: \"Icons\",\r\n    items: [\r\n      {\r\n        id: \"icon-formats\",\r\n        question: \"What icon formats are supported?\",\r\n        answer:\r\n          \"Our icons are available in multiple formats including SVG, PDF, and AI files.\",\r\n      },\r\n    ],\r\n  },\r\n  library: {\r\n    category: \"Library\",\r\n    items: [\r\n      {\r\n        id: \"library-access\",\r\n        question: \"How do I access the library?\",\r\n        answer:\r\n          \"The library is available through our web platform after logging in to your account.\",\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst FAQAccordion: React.FC<FAQAccordionProps> = ({ category, items }) => (\r\n  <div className=\"\">\r\n    <Badge variant={\"outline\"} className=\"py-2 px-6 rounded-md\">\r\n      {category}\r\n    </Badge>\r\n    <Accordion type=\"single\" collapsible className=\"w-full\">\r\n      {items.map((faq) => (\r\n        <AccordionItem key={faq.id} value={faq.id}>\r\n          <AccordionTrigger className=\"text-left hover:no-underline\">\r\n            {faq.question}\r\n          </AccordionTrigger>\r\n          <AccordionContent>{faq.answer}</AccordionContent>\r\n        </AccordionItem>\r\n      ))}\r\n    </Accordion>\r\n  </div>\r\n);\r\n\r\nexport default function FAQSection() {\r\n  const [activeView, setActiveView] = useState<ViewType>(\"general\");\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-16 max-w-4xl\">\r\n      <header className=\"text-center mb-12\">\r\n        <p className=\"text-sm font-medium text-primary mb-2\">FAQs</p>\r\n        <h1 className=\"text-4xl font-bold tracking-tight mb-4\">\r\n          Frequently asked questions\r\n        </h1>\r\n        <p className=\"text-xl text-muted-foreground\">\r\n          Need help with something? Here are our most frequently asked\r\n          questions.\r\n        </p>\r\n      </header>\r\n\r\n      <div className=\"flex justify-center sticky top-2\">\r\n        <Tabs\r\n          defaultValue=\"general\"\r\n          onValueChange={(value) => setActiveView(value as ViewType)}\r\n          className=\"mb-8 max-w-xl border rounded-xl bg-background\"\r\n        >\r\n          <TabsList className=\"w-full justify-start h-12 p-1\">\r\n            <TabsTrigger value=\"general\">General FAQs</TabsTrigger>\r\n            <TabsTrigger value=\"icons\">UI Icons</TabsTrigger>\r\n            <TabsTrigger value=\"library\">Library</TabsTrigger>\r\n          </TabsList>\r\n        </Tabs>\r\n      </div>\r\n\r\n      <FAQAccordion\r\n        category={FAQ_SECTIONS[activeView].category}\r\n        items={FAQ_SECTIONS[activeView].items}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/shapexui/faq.tsx"
    },
    {
      "path": "blocks/faq/faq-01/tabs.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst Tabs = TabsPrimitive.Root;\r\n\r\nconst TabsList = React.forwardRef<\r\n  React.ElementRef<typeof TabsPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"inline-flex h-10 items-center justify-center rounded-md p-1 text-muted-foreground\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTabsList.displayName = TabsPrimitive.List.displayName;\r\n\r\nconst TabsTrigger = React.forwardRef<\r\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\r\n>(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"inline-flex h-10 items-center justify-center whitespace-nowrap rounded-lg px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border data-[state=active]:text-foreground\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\r\n\r\nconst TabsContent = React.forwardRef<\r\n  React.ElementRef<typeof TabsPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nTabsContent.displayName = TabsPrimitive.Content.displayName;\r\n\r\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\r\n",
      "type": "registry:component",
      "target": "components/shapexui/tabs.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "600px"
  },
  "categories": [
    "faq"
  ]
}