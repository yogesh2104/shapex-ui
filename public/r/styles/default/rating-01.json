{
  "name": "rating-01",
  "type": "registry:block",
  "description": "rating block 1",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "blocks/rating/rating-01/rating-one.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useRef, useState, useEffect, useId, RefObject } from \"react\";\r\nimport { Star } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { AnimatePresence, MotionConfig, motion } from \"motion/react\";\r\nimport { ArrowLeftIcon } from \"lucide-react\";\r\n\r\n/**\r\n *\r\n * source [https://github.com/ibelick/motion-primitives/blob/main/hooks/useClickOutside.tsx ]\r\n */\r\nfunction useClickOutside<T extends HTMLElement>(\r\n  ref: RefObject<T>,\r\n  handler: (event: MouseEvent | TouchEvent) => void,\r\n): void {\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\r\n      if (!ref || !ref.current || ref.current.contains(event.target as Node)) {\r\n        return;\r\n      }\r\n\r\n      handler(event);\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    document.addEventListener(\"touchstart\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      document.removeEventListener(\"touchstart\", handleClickOutside);\r\n    };\r\n  }, [ref, handler]);\r\n}\r\n\r\nconst TRANSITION = {\r\n  type: \"spring\",\r\n  bounce: 0.05,\r\n  duration: 0.3,\r\n};\r\n\r\ninterface StarRatingProps {\r\n  maxStars?: number;\r\n  defaultValue?: number;\r\n  onChange?: (rating: number) => void;\r\n  size?: number;\r\n}\r\n\r\nconst StarRating: React.FC<StarRatingProps> = ({\r\n  maxStars = 5,\r\n  defaultValue = 0,\r\n  onChange,\r\n  size = 24,\r\n}) => {\r\n  const [rating, setRating] = useState(defaultValue);\r\n  const [hoverRating, setHoverRating] = useState(0);\r\n\r\n  const handleClick = (value: number) => {\r\n    setRating(value);\r\n    onChange?.(value);\r\n  };\r\n\r\n  const uniqueId = useId();\r\n  const formContainerRef = useRef<HTMLDivElement>(\r\n    null as unknown as HTMLDivElement,\r\n  );\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [note, setNote] = useState<null | string>(null);\r\n\r\n  const openMenu = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const closeMenu = () => {\r\n    setIsOpen(false);\r\n    setNote(null);\r\n  };\r\n\r\n  useClickOutside(formContainerRef, () => {\r\n    closeMenu();\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === \"Escape\") {\r\n        closeMenu();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center justify-center gap-6\">\r\n        {[...Array(maxStars)].map((_, index) => {\r\n          const value = index + 1;\r\n          return (\r\n            <button\r\n              key={index}\r\n              className=\"transition-transform hover:scale-110 focus:outline-none\"\r\n              onMouseEnter={() => setHoverRating(value)}\r\n              onMouseLeave={() => setHoverRating(0)}\r\n              onClick={() => handleClick(value)}\r\n            >\r\n              <Star\r\n                size={size}\r\n                className={cn(\r\n                  \"transition-colors\",\r\n                  (hoverRating || rating) >= value\r\n                    ? \"fill-yellow-400 text-yellow-400\"\r\n                    : \"fill-none text-gray-300\",\r\n                )}\r\n              />\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n      <MotionConfig transition={TRANSITION}>\r\n        <div className=\"relative flex items-center justify-center\">\r\n          <motion.button\r\n            key=\"button\"\r\n            layoutId={`popover-${uniqueId}`}\r\n            className=\"flex h-9 items-center border border-zinc-950/10 bg-white px-3 text-zinc-950 dark:border-zinc-50/10 dark:bg-zinc-700 dark:text-zinc-50\"\r\n            style={{\r\n              borderRadius: 8,\r\n            }}\r\n            onClick={openMenu}\r\n          >\r\n            <motion.span\r\n              layoutId={`popover-label-${uniqueId}`}\r\n              className=\"text-sm\"\r\n            >\r\n              Write Review\r\n            </motion.span>\r\n          </motion.button>\r\n\r\n          <AnimatePresence>\r\n            {isOpen && (\r\n              <motion.div\r\n                ref={formContainerRef}\r\n                layoutId={`popover-${uniqueId}`}\r\n                className=\"absolute h-[200px] w-[364px] overflow-hidden border border-zinc-950/10 bg-white outline-none dark:bg-zinc-700\"\r\n                style={{\r\n                  borderRadius: 12,\r\n                }}\r\n              >\r\n                <form\r\n                  className=\"flex h-full flex-col\"\r\n                  onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                  }}\r\n                >\r\n                  <motion.span\r\n                    layoutId={`popover-label-${uniqueId}`}\r\n                    aria-hidden=\"true\"\r\n                    style={{\r\n                      opacity: note ? 0 : 1,\r\n                    }}\r\n                    className=\"absolute left-4 top-3 select-none text-sm text-zinc-500 dark:text-zinc-400\"\r\n                  >\r\n                    Write Message\r\n                  </motion.span>\r\n                  <textarea\r\n                    className=\"h-full w-full resize-none rounded-md bg-transparent px-4 py-3 text-sm outline-none\"\r\n                    autoFocus\r\n                    onChange={(e) => setNote(e.target.value)}\r\n                  />\r\n                  <div key=\"close\" className=\"flex justify-between px-4 py-3\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"flex items-center\"\r\n                      onClick={closeMenu}\r\n                      aria-label=\"Close popover\"\r\n                    >\r\n                      <ArrowLeftIcon\r\n                        size={16}\r\n                        className=\"text-zinc-900 dark:text-zinc-100\"\r\n                      />\r\n                    </button>\r\n                    <button\r\n                      className=\"relative ml-1 flex h-8 shrink-0 scale-100 select-none appearance-none items-center justify-center rounded-lg border border-zinc-950/10 bg-transparent px-2 text-sm text-zinc-500 transition-colors hover:bg-zinc-100 hover:text-zinc-800 focus-visible:ring-2 active:scale-[0.98] dark:border-zinc-50/10 dark:text-zinc-50 dark:hover:bg-zinc-800\"\r\n                      type=\"submit\"\r\n                      aria-label=\"Submit note\"\r\n                      onClick={() => {\r\n                        closeMenu();\r\n                      }}\r\n                    >\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      </MotionConfig>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Rating = () => {\r\n  return (\r\n    <div className=\"mt-10 flex items-center justify-center\">\r\n      <div className=\"relative w-full max-w-2xl mx-auto\">\r\n        <div className=\"relative\">\r\n          <div className=\"w-full space-x-5 space-y-5\">\r\n            <h1 className=\"text-2xl font-bold text-center\">\r\n              Share Your Experience\r\n            </h1>\r\n            <p className=\"text-center text-gray-500\">\r\n              How was your search experience with our services?\r\n            </p>\r\n            <StarRating\r\n              onChange={(rating) => console.log(\"Star rating:\", rating)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Rating;\r\n",
      "type": "registry:component",
      "target": "components/shapexui/rating.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "300px"
  },
  "categories": [
    "rating"
  ]
}